// These need to be loaded and verified in plugins.gradle.
plugins {
    // https://github.com/tbroyer/gradle-apt-plugin
    // https://plugins.gradle.org/plugin/net.ltgt.apt
    // TODO: to be removed since gradle now natively supports these features
    id 'net.ltgt.apt' version '0.18'
    id 'net.ltgt.apt-idea' version '0.18'

    // https://github.com/tbroyer/gradle-errorprone-plugin
    // https://plugins.gradle.org/plugin/net.ltgt.errorprone
    // id 'net.ltgt.errorprone' version '0.6'

    // https://github.com/johnrengelman/shadow
    // https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow
    // id 'com.github.johnrengelman.shadow' version '4.0.1'
}

// Base Plugins
apply plugin: 'java'
apply plugin: 'application'

// Static Analysis
apply plugin: 'pmd'
apply plugin: 'checkstyle'

repositories {
    mavenCentral()
}

project.archivesBaseName = 'pet'
project.mainClassName = 'de.tum.in.pet.PET'
project.sourceCompatibility = JavaVersion.VERSION_11
project.targetCompatibility = JavaVersion.VERSION_11

def defaultEncoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = defaultEncoding
    // options.errorprone.disableWarningsInGeneratedCode = true
}

tasks.withType(Javadoc) {
    options.encoding = defaultEncoding
}

tasks.withType(JavaExec) {
    environment "LD_LIBRARY_PATH", "$project.buildDir/lib"
}

dependencies {
    implementation files("$project.buildDir/lib/prism.jar")

    // https://github.com/google/guava
    implementation 'com.google.guava:guava:27.0-jre'
    // https://github.com/incaseoftrouble/naturals-util
    implementation 'de.tum.in:naturals-util:0.12.0'
    // https://github.com/vigna/fastutil
    // implementation 'it.unimi.dsi:fastutil:8.2.1'
    // https://immutables.github.io/
    implementation 'org.immutables:value:2.7.1:annotations'
    implementation 'commons-cli:commons-cli:1.4'

    // https://github.com/google/gson
    testImplementation 'com.google.code.gson:gson:2.8.5'
    // https://github.com/junit-team/junit5/
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.3.0")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.3.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.3.0")

    // errorprone 'com.google.errorprone:error_prone_core:2.3.2'
    annotationProcessor 'org.immutables:value:2.7.1'
}

test {
    environment "LD_LIBRARY_PATH", "lib/prism/prism/lib"
    useJUnitPlatform()
}

//noinspection GroovyAssignabilityCheck
task prismJar(type: Jar) {
    baseName = 'prism'
    destinationDir = file("$project.buildDir/lib")
    from "$project.rootDir/lib/prism/prism/src"
    from "$project.rootDir/lib/prism/prism/classes"
    from {
        file("$project.rootDir/lib/prism/prism/lib/")
                .list { file, name -> name.endsWith(".jar") }
                .collect { zipTree("$project.rootDir/lib/prism/prism/lib/" + it) }
    }
}

task prismNatives(type: Copy) {
    from "lib/prism/prism/lib"
    include "*.so"
    into "$project.buildDir/lib/"
}

task prism {
    dependsOn prismJar, prismNatives
}

tasks.withType(JavaCompile) {
    dependsOn prism
}

applicationDefaultJvmArgs = ["-Djava.util.logging.config.file=config/logging.properties"]

task extractScriptTemplates {
    doLast {
        file("config/template-unix.default.txt").text =
                startScripts.unixStartScriptGenerator.template.asString()
        file("config/template-windows.default.txt").text =
                startScripts.windowsStartScriptGenerator.template.asString()
    }
}

startScripts {
    unixStartScriptGenerator.template = resources.text.fromFile('config/template-unix.txt')
    windowsStartScriptGenerator.template = resources.text.fromFile('config/template-windows.txt')
}

distributions {
    main {
        contents {
            from("$project.buildDir/lib/") {
                include "*.so"
                into "lib"
            }
        }
    }
}

// PMD
// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Pmd.html

pmd {
    toolVersion = "6.9.0" // https://pmd.github.io/
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("$project.rootDir/config/pmd-rules.xml")
    ruleSets = [] // We specify all rules in rules.xml
    consoleOutput = false
    ignoreFailures = false
}
//noinspection GroovyAssignabilityCheck
tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Checkstyle
// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Checkstyle.html

checkstyle {
    toolVersion = "8.14" // http://checkstyle.sourceforge.net/releasenotes.html
    configFile = file("$project.rootDir/config/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    showViolations = false // Don't litter console
    checkstyleMain {
        configProperties = ['suppression-file':
                                    "$project.rootDir/config/checkstyle-main-suppression.xml"]
    }
    checkstyleTest {
        configProperties = ['suppression-file':
                                    "$project.rootDir/config/checkstyle-test-suppression.xml"]
    }
}
